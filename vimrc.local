se noswapfile


" Plugins {
    "ctrlp {
        let g:ctrlp_max_height = 30
        let g:ctrlp_clear_cache_on_exit=0
        let g:ctrlp_use_caching = 0

        nn <silent> <Leader>p :CtrlP .<CR>
        nn <silent> <Leader>o :CtrlPBufTag<CR>
        nn <silent> <Leader>i :CtrlPTag<CR>
        nn <silent> <Leader>l :CtrlPLine<CR>
        nn <silent> <Leader>z :CtrlPBuffer<CR>
        nn <silent> <Leader>m :CtrlPMRUFiles<CR>
        nn <silent> <Leader>j :CtrlPRTS<CR>

        let pats = ['\**\([\/?_.0-9A-Za-z]\+\)\([\/]*\)\**\(\\\@<!,\|$\)', '\.', '\\\@<!,']
        let subs = ['\1\2\3', '\\.', '.*|.*']
        let expr = substitute(&wildignore, pats[0], subs[0], 'g')
        let expr = substitute(expr, pats[1], subs[1], 'g')
        let expr = substitute(expr, pats[2], subs[2], 'g')
        let expr = substitute(expr, '\\,', ',', 'g')
        let expr = substitute(expr, '^', '.*', '')
        let expr = substitute(expr, '$', '.*', '')
        "let g:ctrlp_user_command='find %s -type f -regextype posix-extended -not -regex "'.expr .'"'
    " }

    " ctrl-commandline
        let g:ctrlp_extensions = ['commandline']
        com! CtrlPCommandline call ctrlp#init(ctrlp#commandline#id())
        nn <silent> <Leader>q :CtrlPCommandline<CR>
        "com! CtrlPUnicode call ctrlp#init(ctrlp#unicode#id())
    " }
"
